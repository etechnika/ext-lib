<?xml version="1.0" encoding="UTF-8"?>

<project name="Etechnika external lib" default="build">
    <property name="workspace" value="${basedir}" />
    <property name="sourcedir" value="${basedir}/src" />
    <property name="builddir" value="${workspace}/build" />

    <target name="build"
          depends="prepare,vendors,parameters,lint,phpunit,phploc,pdepend,phpcpd,phpmd,phpmd-ci,phpcs-ci,phpcb,phpdoc"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/vendor"/>
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/docs"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/vendor"/>
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
    </target>

    <target name="vendors" description="Install vendors">
        <exec executable="php" failonerror="true">
            <arg value="bin/composer.phar" />
            <arg value="install" />
            <arg value="--dev" />
            <arg value="--no-progress" />
            <arg value="--no-interaction" />
        </exec>
        <exec executable="git" failonerror="true" description="Install Symfony2 coding standard to phpcs">
            <arg value="clone" />
            <arg value="https://github.com/opensky/Symfony2-coding-standard.git" />
            <arg value="${basedir}/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Symfony2" />
        </exec>
    </target>

    <target name="parameters" description="Copy parameters">
        <!--    <exec executable="cp" failonerror="true">
          <arg path="app/config/parameters.yml.dist" />
          <arg path="app/config/parameters.yml" />
        </exec>-->
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${basedir}/vendor/bin/phploc">
            <arg value="--log-csv" />
            <arg value="${builddir}/logs/phploc.csv" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${basedir}/vendor/bin/pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${basedir}/vendor/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${workspace}/build/config/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${basedir}/vendor/bin/phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${workspace}/build/config/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${basedir}/vendor/bin/phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${basedir}/vendor/bin/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${basedir}/vendor/bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpDox">
        <exec executable="phpdoc">
            <arg line="-d '${sourcedir}' -t '${builddir}/docs' --title='Tempo' " />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${basedir}/jenkins.phpunit.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${basedir}/vendor/bin/phpcb">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${sourcedir}" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>
</project>
