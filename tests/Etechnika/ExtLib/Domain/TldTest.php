<?php

namespace Etechnika\ExtLib\Domain;

use \Etechnika\ExtLib\Domain\InvalidTldException;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-22 at 17:54:19.
 *
 * @cover Tld
 */
class TldTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Tld
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
//        $this->object = new Tld;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @param string  $strTld
     * @param boolean
     * @param boolean $booTrue
     *
     * @covers Etechnika\ExtLib\Domain\Tld::__construct
     * @dataProvider providerConstruct
     */
    public function testConstruct($strTld, $booIntranet, $booTrue)
    {
        $strFailMsg = sprintf( 'Tld name: %s, intranet: %s, expected: %s', $strTld, $booIntranet ? 'true' : 'false', $booTrue ? 'true' : 'false' );
        try {
            new Tld($strTld, $booIntranet);

            $booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        } catch (InvalidTldException $e) {
            !$booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        }
    }

    /**
     * Data provider
     *
     * @return array
     */
    public function providerConstruct()
    {
        // array( tld, level, exists )
        return array(
            // Tld list
            array('pl', false, true),
            array('.pl', false, true),
            array('com.pl', false, true),
            array('.com.pl', false, true),
            array('www.com.pl', false, false),
            array('', false, false),
            array(1, false, false),
            array('xn--0zwm56d', false, true),
            array('الاردن', false, false), // encoded .xn--mgbayh7gpa
            array('notldnofun', false, false),
            array('.notldnofun', false, false),
            array('żółśćńęńś', false, false),
            array('notldnofun', false, false),
            array('xn--0zwm56d', false, true),
            // Only syntax
            array('', true, false),
            array(1, true, false),
            array('xn--0zwm56d', true, true),
            array('notldnofun', true, true),
            array('.notldnofun', true, true),
            array('żółśćńęńś', true, false),
            array('żółśćńęńś', true, false),
            array('no-tldnofun', true, true),
            array('no--tldnofun', true, true),
            array('no---tldnofun', true, true),
            array('no---------tldnofun', true, true),
            array('notldnofun--', true, false),
            array('--notldnofun', true, false),
            array('--notldnofun--', true, false),
            array('--xn--notldnofun', true, false),
        );
    }

    /**
     * @param string  $strTld
     * @param boolean $booIntranet
     * @param boolean $booTrue
     *
     * @covers Etechnika\ExtLib\Domain\Tld::create
     * @dataProvider providerConstruct
     */
    public function testCreate($strTld, $booIntranet, $booTrue)
    {
        $strFailMsg = sprintf( 'Tld name: %s, intranet: %s, expected: %s', $strTld, $booIntranet ? 'true' : 'false', $booTrue ? 'true' : 'false' );
        try {
            Tld::create($strTld, $booIntranet);

            $booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        } catch (InvalidTldException $e) {
            !$booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        }
    }

    /**
     * @param string $strTld
     * @param string $strResult
     *
     * @covers Etechnika\ExtLib\Domain\Tld::getTld
     * @dataProvider providerGetTld
     */
    public function testGetTld($strTld, $strResult)
    {
        $objTld = new Tld($strTld);
        $this->assertEquals($strResult, $objTld->getTld());
    }

    /**
     * Data provider
     *
     * @return array
     */
    public function providerGetTld()
    {
        // array( tld, level, exists )
        return array(
            array('pl', 'pl'),
            array('.pl', 'pl'),
            array('com.pl', 'com.pl'),
            array('.com.pl', 'com.pl'),
            array('xn--0zwm56d', 'xn--0zwm56d'),
            array('.xn--0zwm56d', 'xn--0zwm56d'),
        );
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Tld::getLevel
     */
    public function testGetLevel()
    {
        $objTld = new Tld('.pl');
        $this->assertEquals(1, $objTld->getLevel());
        $objTld = new Tld('pl');
        $this->assertEquals(1, $objTld->getLevel());
        $objTld = new Tld('com.pl');
        $this->assertEquals(2, $objTld->getLevel());
    }

    /**
     * @param string  $strTld
     * @param boolean $booIntranet
     * @param boolean $booTrue
     *
     * @covers Etechnika\ExtLib\Domain\Tld::isIdn
     * @dataProvider providerIsIdn
     */
    public function testIsIdn($strTld, $booIntranet, $booTrue)
    {
        $strFailMsg = sprintf( 'Tld name: %s, Intranet: %s, expected: %s', $strTld, $booIntranet ? 'true' : 'false', $booTrue ? 'true' : 'false' );
        try {
            $booResult = Tld::create($strTld, $booIntranet)->isIdn();
            if ($booTrue) {
                $this->assertTrue($booResult, $strFailMsg);
            } else {
                $this->assertFalse($booResult, $strFailMsg);
            } // endif
        } catch (InvalidTldException $e) {
            $this->fail('Invalid tld. '. $strFailMsg);
        }
    }

    /**
     * Data provider
     *
     * @return array
     */
    public function providerIsIdn()
    {
        return array(
            array('xn--0zwm56d', false, true),
            array('xn--0zwm56d.pl', true, true),
            array('xn--0zwm56d.xn--0zwm56d', true, true),
            array('aaaa.xn--0zwm56d', true, true),
            array('aaaa.pl', true, false),
        );
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Tld::__toString
     */
    public function testToString()
    {
        $objTld = Tld::create( 'pl' );
        $this->assertEquals( 'pl', (string) $objTld );
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Tld::__invoke
     */
    public function testInvoke()
    {
        $objTld = Tld::create( 'pl' );
        $this->assertEquals( 'pl', $objTld() );
    }
}