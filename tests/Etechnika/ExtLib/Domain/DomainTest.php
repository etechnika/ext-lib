<?php

namespace Etechnika\ExtLib\Domain;

use Exception;
use PHPUnit_Framework_TestCase;

require_once dirname(__FILE__) . '/DomainNameTestFixture.php';


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-01-23 at 15:26:24.
 *
 * @cover Domain
 */
class DomainTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Domain
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
//        $this->object = new Domain;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::create
     * @dataProvider providerCreate
     */
    public function testCreate($strDomainName, $booIntranet, $booTrue)
    {
        $strFailMsg = sprintf('Domain name: %s, intranet: %s, expected: %s', $strDomainName, $booIntranet ? 'true' : 'false', $booTrue ? 'true' : 'false' );
        try {
            Domain::create($strDomainName, $booIntranet);

            $booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        } catch (InvalidDomainException $e) {
            !$booTrue ? $this->assertTrue(true, $strFailMsg) : $this->fail($strFailMsg);
        }
    }

    /**
     * Data provider
     *
     * @return array
     */
    public function providerCreate()
    {
        return DomainNameTestFixture::providerAllDomains();
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::getDomainName
     */
    public function testGetDomainName()
    {
        $this->assertEquals('a.pl', Domain::create('a.pl')->getDomainName());
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::getName
     */
    public function testGetName()
    {
        $this->assertEquals('a', Domain::create('a.pl')->getName());
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::isIdn
     */
    public function testIsIdn()
    {
        $this->assertFalse(Domain::create('a.pl')->isIdn());
        $this->assertTrue(Domain::create('xn--w-uga1v8h.pl')->isIdn());
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::hasParentDomain
     */
    public function testHasParentDomain()
    {
        $this->assertTrue(Domain::create('a.a.com.pl')->hasParentDomain(), 'a.a.com.pl');
        $this->assertFalse(Domain::create('a.com.pl')->hasParentDomain(), 'a.com.pl');
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::getParentDomain
     */
    public function testGetParentDomain()
    {
        $this->assertInstanceOf(__NAMESPACE__ . '\\Domain', Domain::create('a.a.com.pl')->getParentDomain(), get_class(Domain::create('a.a.com.pl')->getParentDomain()));
        try {
            Domain::create('a.com.pl')->getParentDomain();
            $this->fail('a.com.pl');
        } catch (Exception $ex) {
            $this->assertTrue(true, 'a.com.pl');
        }
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::isSubdomain
     */
    public function testIsSubdomain()
    {
        $this->assertFalse(Domain::create('a.com.pl')->isSubdomain());
        $this->assertTrue(Domain::create('a.a.com.pl')->isSubdomain());
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::getTldNameOrSubdomainName
     */
    public function testGetTldNameOrSubdomainName()
    {
        $this->assertEquals('a.com.pl', Domain::create('a.a.com.pl')->GetTldNameOrSubdomainName());
        $this->assertEquals('com.pl', Domain::create('a.com.pl')->GetTldNameOrSubdomainName());
        $this->assertEquals('pl', Domain::create('com.pl')->GetTldNameOrSubdomainName());
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::getTld
     */
    public function testGetTld()
    {
        $this->assertInstanceOf(__NAMESPACE__ . '\\Tld', Domain::create('a.com.pl')->getTld());
        $this->assertEquals('com.pl', Domain::create('a.com.pl')->getTld()->getName());
        try {
            $this->assertEquals('a.com.pl', Domain::create('a.a.com.pl')->getTld());
            $this->fail();
        } catch (Exception $e) {
            $this->assertTrue(true);
        }
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::__toString
     */
    public function test__toString()
    {
        $this->assertEquals('a.pl', (string) Domain::create('a.pl'));
    }

    /**
     * @covers Etechnika\ExtLib\Domain\Domain::__invoke
     */
    public function test__invoke()
    {
        $objDomain = Domain::create('a.pl');
        $this->assertEquals('a.pl', $objDomain());
    }
}